/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import useHistoryStore from "@/store/useHistoryStore";

export default function Model({ textures }) {
  const { nodes, materials } = useGLTF("/shirt.glb");
  const {
    garmentColor,
    backColor,
    collarColor,
    frontColor,
    leftShoulderColor,
    rightShoulderColor,
  } = useHistoryStore().state;
  let frontMaterial = nodes.Front.material.clone();
  const backMaterial = nodes.Back.material.clone();
  const collarMaterial = nodes.Collar.material.clone();
  const leftShoulderMaterial = nodes.Left.material.clone();
  const rightShoulderMaterial = nodes.Right.material.clone();
  const innerMaterial = nodes.Inner.material.clone();

  const applyUnblendedMap = (material, texture) => {
    material.map = texture;
    material.transparent = true;
    material.alphaTest = 0.5;
    // Force shader features to be included
    material.defines = material.defines || {};
    material.defines.USE_UV = "";
    material.defines.USE_MAP = "";
    material.onBeforeCompile = (shader) => {
      shader.fragmentShader = shader.fragmentShader.replace(
        "#include <map_fragment>",
        `
  #ifdef USE_MAP
    vec4 texelColor = texture2D(map, vUv);
    diffuseColor.rgb = mix(diffuseColor.rgb, texelColor.rgb, texelColor.a);
  #endif
  `
      );
    };

    material.needsUpdate = true;
  };

  //   // Apply texture to all cloned materials
  useEffect(() => {
    const matMap = {
      front: frontMaterial,
      back: backMaterial,

      leftSleeve: leftShoulderMaterial,
      rightSleeve: rightShoulderMaterial,
    };

    Object.keys(textures).forEach((key) => {
      const texture = textures[key];
      if (texture && matMap[key]) {
        texture.flipY = false;
        texture.needsUpdate = true;
        applyUnblendedMap(matMap[key], texture);
      }
    });
  }, [textures]);

  return (
    <group dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Collar.geometry}
        material={collarMaterial}
        material-color={collarColor}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Inner.geometry}
        material={innerMaterial}
        material-color={garmentColor}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107167.geometry}
        material={nodes.StitchMatShape_107167.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107224.geometry}
        material={nodes.StitchMatShape_107224.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107338.geometry}
        material={nodes.StitchMatShape_107338.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107452.geometry}
        material={nodes.StitchMatShape_107452.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107690.geometry}
        material={nodes.StitchMatShape_107690.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107766.geometry}
        material={nodes.StitchMatShape_107766.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107880.geometry}
        material={nodes.StitchMatShape_107880.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_107994.geometry}
        material={nodes.StitchMatShape_107994.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_108164.geometry}
        material={nodes.StitchMatShape_108164.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.StitchMatShape_108334.geometry}
        material={nodes.StitchMatShape_108334.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Front.geometry}
        material={frontMaterial}
        material-color={frontColor}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Right.geometry}
        material={rightShoulderMaterial}
        material-color={rightShoulderColor}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Left.geometry}
        material={leftShoulderMaterial}
        material-color={leftShoulderColor}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Back.geometry}
        material={backMaterial}
        material-color={backColor}
      />
    </group>
  );
}

useGLTF.preload("/shirt.glb");
