/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 Tshirt_V10.glb -k -K -T -j -M 
Files: Tshirt_V10.glb [74.23MB] > /Users/hanan/Desktop/Work/cloth-configurator/public/models/Tshirt_V10-transformed.glb [60.29MB] (19%)
*/

import React, { useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from "three";
import useHistoryStore from "@/store/useHistoryStore";

export function Model({ textures }) {
  const group = React.useRef();
  const { nodes, materials, animations } = useGLTF(
    "/models/Tshirt_V10-transformed.glb"
  );
  const { actions } = useAnimations(animations, group);
  const {
    garmentColor,
    backColor,
    collarColor,
    frontColor,
    leftShoulderColor,
    rightShoulderColor,
  } = useHistoryStore().state;
  let frontMaterial = materials["fab.007"].clone();
  const backMaterial = materials["fab.007"].clone();
  const collarMaterial = materials["fab.007"].clone();
  const leftShoulderMaterial = materials["fab.007"].clone();
  const rightShoulderMaterial = materials["fab.007"].clone();
  const innerMaterial = materials["fab.007"].clone();

  const applyUnblendedMap = (material, texture) => {
    material.map = texture;
    material.transparent = true;
    material.alphaTest = 0.5;
    // Force shader features to be included
    material.defines = material.defines || {};
    material.defines.USE_UV = "";
    material.defines.USE_MAP = "";
    material.onBeforeCompile = (shader) => {
      shader.fragmentShader = shader.fragmentShader.replace(
        "#include <map_fragment>",
        `
  #ifdef USE_MAP
    vec4 texelColor = texture2D(map, vUv);
    diffuseColor.rgb = mix(diffuseColor.rgb, texelColor.rgb, texelColor.a);
  #endif
  `
      );
    };

    material.needsUpdate = true;
  };

  //   // Apply texture to all cloned materials
  useEffect(() => {
    const matMap = {
      front: frontMaterial,
      back: backMaterial,

      leftSleeve: leftShoulderMaterial,
      rightSleeve: rightShoulderMaterial,
    };

    Object.keys(textures).forEach((key) => {
      const texture = textures[key];
      if (texture && matMap[key]) {
        //texture.flipY = false;
        texture.needsUpdate = true;
        applyUnblendedMap(matMap[key], texture);
      }
    });
  }, [textures]);

  // Set the initial animation to play
  React.useEffect(() => {
    if (actions) {
      // console.log("Actions: ", actions);
      //set the animation to loop
      actions["Pose"].setLoop(THREE.LoopRepeat, Infinity);
      actions["Pose"].play();
    }
  }, [actions]);

  return (
    <group scale={0.0013} position-y={-1.65} ref={group} dispose={null}>
      <group name="Scene">
        <mesh
          name="Pattern_740043_Node003"
          geometry={nodes.Pattern_740043_Node003.geometry}
          material={collarMaterial}
          material-color={collarColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node003.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node003.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node001"
          geometry={nodes.Pattern_740043_Node001.geometry}
          material={collarMaterial}
          material-color={collarColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node001.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node001.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node002"
          geometry={nodes.Pattern_740043_Node002.geometry}
          material={backMaterial}
          material-color={backColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node002.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node002.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node004"
          geometry={nodes.Pattern_740043_Node004.geometry}
          material={frontMaterial}
          material-color={frontColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node004.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node004.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node005"
          geometry={nodes.Pattern_740043_Node005.geometry}
          material={leftShoulderMaterial}
          material-color={leftShoulderColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node005.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node005.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node006"
          geometry={nodes.Pattern_740043_Node006.geometry}
          material={leftShoulderMaterial}
          material-color={leftShoulderColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node006.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node006.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node007"
          geometry={nodes.Pattern_740043_Node007.geometry}
          material={leftShoulderMaterial}
          material-color={leftShoulderColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node007.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node007.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node008"
          geometry={nodes.Pattern_740043_Node008.geometry}
          material={rightShoulderMaterial}
          material-color={rightShoulderColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node008.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node008.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node009"
          geometry={nodes.Pattern_740043_Node009.geometry}
          material={rightShoulderMaterial}
          material-color={rightShoulderColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node009.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node009.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node010"
          geometry={nodes.Pattern_740043_Node010.geometry}
          material={rightShoulderMaterial}
          material-color={rightShoulderColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node010.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node010.morphTargetInfluences
          }
        />
        <mesh
          name="Pattern_740043_Node011"
          geometry={nodes.Pattern_740043_Node011.geometry}
          material={collarMaterial}
          material-color={collarColor}
          morphTargetDictionary={
            nodes.Pattern_740043_Node011.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Pattern_740043_Node011.morphTargetInfluences
          }
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/Tshirt_V10-transformed.glb");
